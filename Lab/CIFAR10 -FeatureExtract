{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"CIFAR10 -FeatureExtract","provenance":[{"file_id":"1lfJehcmC6EWDyOGXl3mQy7USlVAC-Ccl","timestamp":1653981253249},{"file_id":"1404AvO2MTRJ91yiLz0oe_xKo-D0g5qP1","timestamp":1586655465462}],"collapsed_sections":[]},"kernelspec":{"name":"python3","display_name":"Python 3"},"accelerator":"GPU"},"cells":[{"cell_type":"code","metadata":{"id":"dcWeFqmvMONQ","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1653984636010,"user_tz":-420,"elapsed":7456,"user":{"displayName":"Nguyen Tram","userId":"06608696287955929010"}},"outputId":"cedf8a2d-c1e3-485c-c8ea-ebad05e032d4"},"source":["#Load CIFAR10 dataset\n","# Dataset of 50,000 32x32 color training images, labeled over 10 categories, and 10,000 test images.\n","from keras.datasets import cifar10\n","(x_train, y_train), (x_test, y_test) = cifar10.load_data()"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Downloading data from https://www.cs.toronto.edu/~kriz/cifar-10-python.tar.gz\n","170500096/170498071 [==============================] - 2s 0us/step\n","170508288/170498071 [==============================] - 2s 0us/step\n"]}]},{"cell_type":"code","metadata":{"id":"jFvBEZRiMjrI","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1653984640668,"user_tz":-420,"elapsed":274,"user":{"displayName":"Nguyen Tram","userId":"06608696287955929010"}},"outputId":"ba99c4a3-6681-4090-9b31-a7057161d220"},"source":["import numpy as np\n","print(x_train.shape,y_train.shape,x_test.shape, y_test.shape)"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["(50000, 32, 32, 3) (50000, 1) (10000, 32, 32, 3) (10000, 1)\n"]}]},{"cell_type":"code","metadata":{"id":"NX6SubDqMb84","colab":{"base_uri":"https://localhost:8080/","height":339},"executionInfo":{"status":"error","timestamp":1653984643056,"user_tz":-420,"elapsed":285,"user":{"displayName":"Nguyen Tram","userId":"06608696287955929010"}},"outputId":"8338af0f-b5ea-4d43-d5b6-623857d9e25f"},"source":["from keras.utils import to_categorical\n","train_lbl = to_categorical(y_train)\n","test_lbl = to_categorical(y_test)"],"execution_count":null,"outputs":[{"output_type":"error","ename":"ImportError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mImportError\u001b[0m                               Traceback (most recent call last)","\u001b[0;32m<ipython-input-3-b91ac195790a>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0;32mfrom\u001b[0m \u001b[0mkeras\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mutils\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mto_categorical\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      2\u001b[0m \u001b[0mtrain_lbl\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mto_categorical\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0my_train\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0mtest_lbl\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mto_categorical\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0my_test\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mImportError\u001b[0m: cannot import name 'to_categorical' from 'keras.utils' (/usr/local/lib/python3.7/dist-packages/keras/utils/__init__.py)","","\u001b[0;31m---------------------------------------------------------------------------\u001b[0;32m\nNOTE: If your import is failing due to a missing package, you can\nmanually install dependencies using either !pip or !apt.\n\nTo view examples of installing some common dependencies, click the\n\"Open Examples\" button below.\n\u001b[0;31m---------------------------------------------------------------------------\u001b[0m\n"],"errorDetails":{"actions":[{"action":"open_url","actionText":"Open Examples","url":"/notebooks/snippets/importing_libraries.ipynb"}]}}]},{"cell_type":"code","metadata":{"id":"Bq02de9KMdlg","colab":{"base_uri":"https://localhost:8080/","height":603},"executionInfo":{"status":"ok","timestamp":1586657913788,"user_tz":-420,"elapsed":61415,"user":{"displayName":"Huy Nguyễn Tiến","photoUrl":"","userId":"14788740065847059351"}},"outputId":"519eb159-e3ae-4fee-967d-c5a0e0bc2b6a"},"source":["from tensorflow.keras.layers import *\n","from tensorflow.keras.models import Model\n","\n","\n","input_layer = Input(shape=(32,32,3))\n","\n","conv_layer1 = Conv2D(100,(5,5),activation=\"relu\",padding=\"same\")(input_layer)\n","pooling_layer1 = MaxPooling2D((2,2))(conv_layer1)\n","\n","conv_layer2 = Conv2D(100,(3,3),activation=\"relu\",padding=\"same\")(conv_layer1)\n","pooling_layer2 = MaxPooling2D((2,2))(conv_layer2)\n","\n","flatten_layer = Flatten()(pooling_layer2)\n","dense_layer1 = Dense(50, activation=\"relu\",name=\"dense1\")(flatten_layer)\n","dense_layer2 = Dense(10, activation=\"softmax\")(dense_layer1)\n","\n","model = Model(inputs=input_layer, outputs=dense_layer2)\n","model.compile(loss='categorical_crossentropy', optimizer=\"adam\",metrics=[\"accuracy\"])\n","model.summary()\n","model.fit(x_train,train_lbl,validation_data=(x_test,test_lbl), epochs= 5, batch_size=100)\n"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Model: \"model_30\"\n","_________________________________________________________________\n","Layer (type)                 Output Shape              Param #   \n","=================================================================\n","input_15 (InputLayer)        [(None, 32, 32, 3)]       0         \n","_________________________________________________________________\n","conv2d_19 (Conv2D)           (None, 32, 32, 100)       7600      \n","_________________________________________________________________\n","conv2d_20 (Conv2D)           (None, 32, 32, 100)       90100     \n","_________________________________________________________________\n","max_pooling2d_20 (MaxPooling (None, 16, 16, 100)       0         \n","_________________________________________________________________\n","flatten_14 (Flatten)         (None, 25600)             0         \n","_________________________________________________________________\n","dense1 (Dense)               (None, 50)                1280050   \n","_________________________________________________________________\n","dense_30 (Dense)             (None, 10)                510       \n","=================================================================\n","Total params: 1,378,260\n","Trainable params: 1,378,260\n","Non-trainable params: 0\n","_________________________________________________________________\n","Epoch 1/5\n","500/500 [==============================] - 12s 24ms/step - loss: 3.3277 - accuracy: 0.2743 - val_loss: 1.7801 - val_accuracy: 0.3524\n","Epoch 2/5\n","500/500 [==============================] - 12s 24ms/step - loss: 1.6435 - accuracy: 0.4071 - val_loss: 1.5423 - val_accuracy: 0.4469\n","Epoch 3/5\n","500/500 [==============================] - 12s 24ms/step - loss: 1.5010 - accuracy: 0.4644 - val_loss: 1.5051 - val_accuracy: 0.4631\n","Epoch 4/5\n","500/500 [==============================] - 12s 24ms/step - loss: 1.3826 - accuracy: 0.5070 - val_loss: 1.4377 - val_accuracy: 0.4889\n","Epoch 5/5\n","500/500 [==============================] - 12s 24ms/step - loss: 1.2466 - accuracy: 0.5614 - val_loss: 1.3073 - val_accuracy: 0.5480\n"],"name":"stdout"},{"output_type":"execute_result","data":{"text/plain":["<tensorflow.python.keras.callbacks.History at 0x7fddc45fc668>"]},"metadata":{"tags":[]},"execution_count":40}]},{"cell_type":"code","metadata":{"id":"Zlyt2xtGIBrn","colab":{"base_uri":"https://localhost:8080/","height":548},"executionInfo":{"status":"ok","timestamp":1586657043461,"user_tz":-420,"elapsed":1391,"user":{"displayName":"Huy Nguyễn Tiến","photoUrl":"","userId":"14788740065847059351"}},"outputId":"89a1d486-3752-4785-a608-795f5fa12d2b"},"source":["model2 = Model(inputs=input_layer, outputs=dense_layer1)\n","model2.summary()\n","model2.predict(x_test[0:1])"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Model: \"model_13\"\n","_________________________________________________________________\n","Layer (type)                 Output Shape              Param #   \n","=================================================================\n","input_12 (InputLayer)        [(None, 32, 32, 3)]       0         \n","_________________________________________________________________\n","conv2d_13 (Conv2D)           (None, 32, 32, 150)       11400     \n","_________________________________________________________________\n","conv2d_14 (Conv2D)           (None, 32, 32, 150)       202650    \n","_________________________________________________________________\n","max_pooling2d_14 (MaxPooling (None, 16, 16, 150)       0         \n","_________________________________________________________________\n","flatten_11 (Flatten)         (None, 38400)             0         \n","_________________________________________________________________\n","dense_20 (Dense)             (None, 50)                1920050   \n","=================================================================\n","Total params: 2,134,100\n","Trainable params: 2,134,100\n","Non-trainable params: 0\n","_________________________________________________________________\n"],"name":"stdout"},{"output_type":"execute_result","data":{"text/plain":["array([[ 0.        ,  0.        ,  0.        ,  0.6099334 ,  0.        ,\n","         0.        ,  0.        , 21.125837  ,  0.        ,  0.        ,\n","         0.        ,  0.        ,  6.225261  ,  0.        ,  0.        ,\n","         0.        , 10.830847  ,  0.        ,  0.        ,  0.        ,\n","         0.        ,  0.        ,  0.        ,  0.        ,  0.        ,\n","         0.        ,  0.        ,  3.3172615 , 15.093008  ,  0.        ,\n","        26.103418  ,  0.        ,  0.        ,  0.        ,  0.        ,\n","         0.        ,  0.79663074,  0.        ,  0.        ,  0.        ,\n","         0.        ,  0.        ,  0.        ,  0.        ,  8.329834  ,\n","         0.        ,  0.        ,  8.281407  ,  0.        ,  0.        ]],\n","      dtype=float32)"]},"metadata":{"tags":[]},"execution_count":18}]},{"cell_type":"code","metadata":{"id":"KHajDp5XIXtx","colab":{"base_uri":"https://localhost:8080/","height":343},"executionInfo":{"status":"ok","timestamp":1586657094610,"user_tz":-420,"elapsed":1009,"user":{"displayName":"Huy Nguyễn Tiến","photoUrl":"","userId":"14788740065847059351"}},"outputId":"2aa10102-460e-44b2-a900-da0a1e2dffce"},"source":["model2 = Model(inputs=input_layer, outputs=flatten_layer)\n","model2.summary()\n","model2.predict(x_test[0:1])"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Model: \"model_14\"\n","_________________________________________________________________\n","Layer (type)                 Output Shape              Param #   \n","=================================================================\n","input_12 (InputLayer)        [(None, 32, 32, 3)]       0         \n","_________________________________________________________________\n","conv2d_13 (Conv2D)           (None, 32, 32, 150)       11400     \n","_________________________________________________________________\n","conv2d_14 (Conv2D)           (None, 32, 32, 150)       202650    \n","_________________________________________________________________\n","max_pooling2d_14 (MaxPooling (None, 16, 16, 150)       0         \n","_________________________________________________________________\n","flatten_11 (Flatten)         (None, 38400)             0         \n","=================================================================\n","Total params: 214,050\n","Trainable params: 214,050\n","Non-trainable params: 0\n","_________________________________________________________________\n"],"name":"stdout"},{"output_type":"execute_result","data":{"text/plain":["array([[0., 0., 0., ..., 0., 0., 0.]], dtype=float32)"]},"metadata":{"tags":[]},"execution_count":19}]},{"cell_type":"code","metadata":{"id":"y9oobFj4JfPE","colab":{"base_uri":"https://localhost:8080/","height":360},"executionInfo":{"status":"ok","timestamp":1586657379208,"user_tz":-420,"elapsed":916,"user":{"displayName":"Huy Nguyễn Tiến","photoUrl":"","userId":"14788740065847059351"}},"outputId":"b0df3c58-7e6f-4c7c-fd72-a5c4b3c7a3fd"},"source":["model3 = Model(inputs=model.input, outputs=model.layers[-2].output)\n","model3.summary()"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Model: \"model_23\"\n","_________________________________________________________________\n","Layer (type)                 Output Shape              Param #   \n","=================================================================\n","input_13 (InputLayer)        [(None, 32, 32, 3)]       0         \n","_________________________________________________________________\n","conv2d_15 (Conv2D)           (None, 32, 32, 150)       11400     \n","_________________________________________________________________\n","conv2d_16 (Conv2D)           (None, 32, 32, 150)       202650    \n","_________________________________________________________________\n","max_pooling2d_16 (MaxPooling (None, 16, 16, 150)       0         \n","_________________________________________________________________\n","flatten_12 (Flatten)         (None, 38400)             0         \n","_________________________________________________________________\n","dense1 (Dense)               (None, 50)                1920050   \n","=================================================================\n","Total params: 2,134,100\n","Trainable params: 2,134,100\n","Non-trainable params: 0\n","_________________________________________________________________\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"3tAYJuBUIkwL","colab":{"base_uri":"https://localhost:8080/","height":360},"executionInfo":{"status":"ok","timestamp":1586657381536,"user_tz":-420,"elapsed":907,"user":{"displayName":"Huy Nguyễn Tiến","photoUrl":"","userId":"14788740065847059351"}},"outputId":"46ab9b74-dedc-4bf0-fdbe-89360bce93b2"},"source":["model4 = Model(inputs=model.input, outputs=model.get_layer(\"dense1\").output)\n","model4.summary()"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Model: \"model_24\"\n","_________________________________________________________________\n","Layer (type)                 Output Shape              Param #   \n","=================================================================\n","input_13 (InputLayer)        [(None, 32, 32, 3)]       0         \n","_________________________________________________________________\n","conv2d_15 (Conv2D)           (None, 32, 32, 150)       11400     \n","_________________________________________________________________\n","conv2d_16 (Conv2D)           (None, 32, 32, 150)       202650    \n","_________________________________________________________________\n","max_pooling2d_16 (MaxPooling (None, 16, 16, 150)       0         \n","_________________________________________________________________\n","flatten_12 (Flatten)         (None, 38400)             0         \n","_________________________________________________________________\n","dense1 (Dense)               (None, 50)                1920050   \n","=================================================================\n","Total params: 2,134,100\n","Trainable params: 2,134,100\n","Non-trainable params: 0\n","_________________________________________________________________\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"4gqh8BKiI2sR","colab":{"base_uri":"https://localhost:8080/","height":394},"executionInfo":{"status":"ok","timestamp":1586657639207,"user_tz":-420,"elapsed":930,"user":{"displayName":"Huy Nguyễn Tiến","photoUrl":"","userId":"14788740065847059351"}},"outputId":"d0cee0db-05e5-457d-c802-e4e7bdd7b89b"},"source":["last_layer = Dense(5)(model.get_layer(\"dense1\").output)\n","model5 = Model(inputs=model.input,outputs=last_layer)\n","model5.summary()"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Model: \"model_27\"\n","_________________________________________________________________\n","Layer (type)                 Output Shape              Param #   \n","=================================================================\n","input_13 (InputLayer)        [(None, 32, 32, 3)]       0         \n","_________________________________________________________________\n","conv2d_15 (Conv2D)           (None, 32, 32, 150)       11400     \n","_________________________________________________________________\n","conv2d_16 (Conv2D)           (None, 32, 32, 150)       202650    \n","_________________________________________________________________\n","max_pooling2d_16 (MaxPooling (None, 16, 16, 150)       0         \n","_________________________________________________________________\n","flatten_12 (Flatten)         (None, 38400)             0         \n","_________________________________________________________________\n","dense1 (Dense)               (None, 50)                1920050   \n","_________________________________________________________________\n","dense_27 (Dense)             (None, 5)                 255       \n","=================================================================\n","Total params: 2,134,355\n","Trainable params: 2,134,355\n","Non-trainable params: 0\n","_________________________________________________________________\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"WjPWhKXKKqSd","colab":{"base_uri":"https://localhost:8080/","height":394},"executionInfo":{"status":"ok","timestamp":1586657714560,"user_tz":-420,"elapsed":926,"user":{"displayName":"Huy Nguyễn Tiến","photoUrl":"","userId":"14788740065847059351"}},"outputId":"b8878549-1dc3-4246-a44f-c16e2c74ea35"},"source":["last_layer = Dense(5)(dense_layer1)\n","model6 = Model(inputs=input_layer,outputs=last_layer)\n","model6.summary()"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Model: \"model_28\"\n","_________________________________________________________________\n","Layer (type)                 Output Shape              Param #   \n","=================================================================\n","input_13 (InputLayer)        [(None, 32, 32, 3)]       0         \n","_________________________________________________________________\n","conv2d_15 (Conv2D)           (None, 32, 32, 150)       11400     \n","_________________________________________________________________\n","conv2d_16 (Conv2D)           (None, 32, 32, 150)       202650    \n","_________________________________________________________________\n","max_pooling2d_16 (MaxPooling (None, 16, 16, 150)       0         \n","_________________________________________________________________\n","flatten_12 (Flatten)         (None, 38400)             0         \n","_________________________________________________________________\n","dense1 (Dense)               (None, 50)                1920050   \n","_________________________________________________________________\n","dense_28 (Dense)             (None, 5)                 255       \n","=================================================================\n","Total params: 2,134,355\n","Trainable params: 2,134,355\n","Non-trainable params: 0\n","_________________________________________________________________\n"],"name":"stdout"}]}]}